<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link rel="stylesheet" href="/css/style.css">
</head>
<body>
    <div class="container">
        <header>
            <h1>📚 Document History</h1>
            <div class="header-buttons">
                <a href="/" class="btn btn-primary">+ Upload New Document</a>
                <a href="/chat-all" class="btn btn-success">💬 Ask All Documents</a>
            </div>
        </header>

        <main>
            <div class="loading" id="loading">
                <div class="spinner"></div>
                <p>Loading documents...</p>
            </div>

            <div class="history-container" id="historyContainer" style="display: none;">
                <div class="stats-bar">
                    <div class="stat">
                        <span class="stat-label">Total Documents:</span>
                        <span class="stat-value" id="totalDocs">0</span>
                    </div>
                    <div class="stat">
                        <span class="stat-label">Total Size:</span>
                        <span class="stat-value" id="totalSize">0 MB</span>
                    </div>
                </div>

                <div class="documents-grid" id="documentsGrid">
                    <!-- Documents will be inserted here -->
                </div>
            </div>

            <div class="empty-state" id="emptyState" style="display: none;">
                <div class="empty-icon">📄</div>
                <h2>No Documents Yet</h2>
                <p>Upload your first financial statement to get started!</p>
                <a href="/" class="btn btn-primary">Upload Document</a>
            </div>
        </main>
    </div>

    <script>
        const BACKEND_URL = '<%= backendUrl %>';

        document.addEventListener('DOMContentLoaded', () => {
            loadDocuments();
        });

        async function loadDocuments() {
            try {
                const response = await fetch(`${BACKEND_URL}/api/documents`);
                const result = await response.json();

                document.getElementById('loading').style.display = 'none';

                if (result.success && result.documents.length > 0) {
                    displayDocuments(result.documents);
                } else {
                    document.getElementById('emptyState').style.display = 'block';
                }
            } catch (error) {
                console.error('Failed to load documents:', error);
                document.getElementById('loading').style.display = 'none';
                document.getElementById('emptyState').style.display = 'block';
            }
        }

        function displayDocuments(documents) {
            const grid = document.getElementById('documentsGrid');
            const totalSize = documents.reduce((sum, doc) => sum + doc.size_mb, 0);

            document.getElementById('totalDocs').textContent = documents.length;
            document.getElementById('totalSize').textContent = totalSize.toFixed(2) + ' MB';

            grid.innerHTML = documents.map(doc => createDocumentCard(doc)).join('');
            document.getElementById('historyContainer').style.display = 'block';
        }

        function createDocumentCard(doc) {
            const uploadDate = new Date(doc.uploaded_at);
            const timeAgo = getTimeAgo(uploadDate);

            return `
                <div class="document-card" data-file-id="${doc.file_id}">
                    <div class="doc-header">
                        <div class="doc-icon">${getFileIcon(doc.format)}</div>
                        <div class="doc-format">${doc.format}</div>
                    </div>
                    <div class="doc-body">
                        <h3 class="doc-title">${doc.filename}</h3>
                        <div class="doc-meta">
                            <span>📅 ${timeAgo}</span>
                            <span>💾 ${doc.size_mb} MB</span>
                            ${doc.has_excel ? '<span>✅ Excel</span>' : ''}
                        </div>
                    </div>
                    <div class="doc-actions">
                        <button class="btn-action btn-view" onclick="viewDocument('${doc.file_id}')">
                            👁️ View Analysis
                        </button>
                        <button class="btn-action btn-chat" onclick="chatDocument('${doc.file_id}')">
                            💬 Ask Questions
                        </button>
                        ${doc.has_excel ? `
                        <button class="btn-action btn-download" onclick="downloadExcel('${doc.file_id}')">
                            📊 Download Excel
                        </button>
                        ` : ''}
                        <button class="btn-action btn-delete" onclick="deleteDocument('${doc.file_id}')">
                            🗑️ Delete
                        </button>
                    </div>
                </div>
            `;
        }

        function getFileIcon(format) {
            const icons = {
                'PDF': '📕',
                'DOCX': '📘',
                'DOC': '📘',
                'TXT': '📄'
            };
            return icons[format] || '📄';
        }

        function getTimeAgo(date) {
            const seconds = Math.floor((new Date() - date) / 1000);
            const intervals = {
                year: 31536000,
                month: 2592000,
                week: 604800,
                day: 86400,
                hour: 3600,
                minute: 60
            };

            for (const [unit, secondsInUnit] of Object.entries(intervals)) {
                const interval = Math.floor(seconds / secondsInUnit);
                if (interval >= 1) {
                    return `${interval} ${unit}${interval > 1 ? 's' : ''} ago`;
                }
            }
            return 'Just now';
        }

        function viewDocument(fileId) {
            window.location.href = `/analyze/${fileId}`;
        }

        function chatDocument(fileId) {
            window.location.href = `/analyze/${fileId}#chat`;
        }

        function downloadExcel(fileId) {
            window.open(`${BACKEND_URL}/api/download/${fileId}`, '_blank');
        }

        async function deleteDocument(fileId) {
            if (!confirm('Are you sure you want to delete this document? This action cannot be undone.')) {
                return;
            }

            try {
                const response = await fetch(`${BACKEND_URL}/api/documents/${fileId}`, {
                    method: 'DELETE'
                });

                const result = await response.json();

                if (result.success) {
                    // Remove card with animation
                    const card = document.querySelector(`[data-file-id="${fileId}"]`);
                    card.style.opacity = '0';
                    card.style.transform = 'scale(0.8)';

                    setTimeout(() => {
                        card.remove();
                        // Reload to update stats
                        loadDocuments();
                    }, 300);
                } else {
                    alert('Failed to delete document: ' + result.message);
                }
            } catch (error) {
                alert('Failed to delete document: ' + error.message);
            }
        }
    </script>
</body>
</html>