services:
  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: finstat-backend
    restart: unless-stopped
    ports:
      - "8000:8000"
    volumes:
      # Persistent data
      - ./backend/uploads:/app/uploads
      - ./backend/outputs:/app/outputs
      - ./backend/data:/app/data
      - ./backend/logs:/app/logs
      # Mount embedding model from host (if already downloaded)
      - ${EMBEDDING_MODEL_PATH}:/app/models/bge-m3:ro
    environment:
      # AI Provider (Ollama on host)
      - AI_PROVIDER=ollama
      - OLLAMA_BASE_URL=${OLLAMA_BASE_URL:-http://host.docker.internal:11434}
      - OLLAMA_MODEL=${OLLAMA_MODEL:-llama3.1:8b-instruct-q5_K_M}

      # Embedding Model
      - EMBEDDING_MODEL_PATH=/app/models/bge-m3

      # Directories
      - UPLOAD_DIR=/app/uploads
      - OUTPUT_DIR=/app/outputs
      - DATA_DIR=/app/data
      - CHROMA_PERSIST_DIR=/app/data/chroma_db

      # Logging
      - LOG_LEVEL=INFO
    extra_hosts:
      # Allow container to access host services (Ollama)
      - "host.docker.internal:host-gateway"
    networks:
      - finstat-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/docs"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: finstat-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - BACKEND_URL=http://localhost:8000
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - finstat-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Optional: Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: finstat-nginx
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - frontend
      - backend
    networks:
      - finstat-network
    profiles:
      - with-nginx

networks:
  finstat-network:
    driver: bridge

volumes:
  backend-data:
  backend-uploads:
  backend-outputs: